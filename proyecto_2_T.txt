# -*- coding: utf-8 -*-
"""Proyecto 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15h2mSLmB7S2sn8CHX-1DxlhxXrUI02Dw
"""

!git clone https://github.com/hchocobar/ucu_pad_project_2023_02.git

import pandas as pd
import numpy as np

# Filter all warnings. If you would like to see the warnings, please comment the two lines below.
import warnings

warnings.filterwarnings('ignore')

"""Pregunta nro.1"""

path = "/content/ucu_pad_project_2023_02/assets/Energy Indicators.xls"
energy = pd.read_excel(path, skiprows=17, skipfooter=38)

energy = energy.iloc[:,2:]

# Renombrar las columnas
energy.columns = ['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']

# Mostrar las primeras filas del DataFrame para verificar

energy['Energy Supply']= energy['Energy Supply'].apply(lambda x: x*1000000 if x!='...'else np.nan)
print(energy.head())

energy['Energy Supply per Capita'] = energy['Energy Supply per Capita'].apply(lambda x: x if x!= "..."else np.nan)

print(energy.head())

# Elimina parentesis
energy['Country'] = energy['Country'].str.replace(r"\s*\(.*\)", "", regex=True)
energy['Country'] = energy['Country'].str.replace(r"\d+$", "", regex=True)
energy["Country"]= energy["Country"].str.strip()
print(energy.head())

energy["Country"].replace( {
    "Republic of Korea": "South Korea",
    "United States of America20": "United States",
    "United Kingdom of Great Britain and Northern Ireland19": "United Kingdom",
    "China, Hong Kong Special Administrative Region3": "Hong Kong",
    "China2":"China",
    "Japan10":"Japan",
    "France6": "France",
    "Italy9": "Italy",
    "Spain16": "Spain",
    "Autralia1": "Australia"
})

path = "/content/ucu_pad_project_2023_02/assets/world_bank.csv"

# Cargar datos del PBI a un DataFrame
gdp = pd.read_csv(path, skiprows=4)

gdp["Country Name"].replace({
    "Korea, Rep.": "South Korea",
    "Iran, Islamic Rep.": "Iran",
    "Hong Kong SAR, China": "Hong Kong"
},inplace=True)

print(gdp.head())

path= "/content/ucu_pad_project_2023_02/assets/scimagojr-3.xlsx"
 scimago= pd.read_excel(path)
 scimago= scimago[scimago["Rank"]<=15]

#gdp = gdp.rename(columns={'Country Name': 'Country'})
#energy = energy.rename(columns={'Country Name': 'Country'})

def carga_datos():
  combinado = pd.merge(scimago, energy, how="inner", left_on="Country", right_on="Country")
  combinado = pd.merge(combinado, gdp, how="inner", left_on="Country", right_on="Country Name")
  columnas_requeridas = ["Country", "Rank", "Documents", "Citable documents", "Citations", "Self-citations", "Citations per document", "H index", "Energy Supply", "Energy Supply per Capita", "% Renewable", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015"]
  combinado = combinado[columnas_requeridas]
  combinado.set_index('Country', inplace=True)
  return combinado
carga_datos()

"""Pregunta 2"""

def outer():
  outer1 = pd.merge(scimago, energy, how="outer", left_on="Country", right_on="Country")
  outer1 = pd.merge(outer1, gdp, how="outer", left_on="Country", right_on="Country Name")
  cantidad = len(outer1)
  cantidad_combinado = len(carga_datos())
  resultado = cantidad - cantidad_combinado
  return resultado
outer()

"""Pregunta 3


"""

def promedio_pbi():

  # Calcular promedio del PBI del 2006 al 2015
  gdp_columnas = ['2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']
  gdp_datos = gdp[gdp_columnas]
  avg = gdp_datos.mean(axis=1)
  avg_n = gdp[["Country Name"]].copy()
  avg_n ["Average GDP"]=avg
  avg_n = avg_n.sort_values(by="Average GDP",ascending=False)
  top15 = avg_n.head(15)
  avgGDP = top15.set_index("Country Name")["Average GDP"]
  return avgGDP
promedio_pbi()

"""Pregunta 4"""

def GDP_cambios():


  # 1. Selecciona el país con el sexto PIB promedio más grande
  sixth_country = promedio_pbi().index[5]
  GDP2006 = gdp[gdp["Country Name"]==sixth_country]["2006"].values[0]
  GDP2015 = gdp[gdp["Country Name"]==sixth_country]["2015"].values[0]
  GDP_cambio= GDP2015 - GDP2006
  return GDP_cambio
GDP_cambios()

"""Pregunta 5"""

def energy_pc():
  avg= carga_datos()["Energy Supply per Capita"].mean()
  return avg
energy_pc()

"""Pregunta 6

"""

def percent():

  max_renewable_country = carga_datos()['% Renewable'].idxmax()
  max_renewable_percentage = carga_datos().loc[max_renewable_country, '% Renewable']
  return (max_renewable_country, max_renewable_percentage)
percent()

"""Pregunta 7"""

def relacion_columna():
  datosq = carga_datos()
  datosq["Citations Ratio"]=datosq["Self-citations"]/datosq["Citations"]
  maxid=datosq["Citations Ratio"].idxmax()
  max=datosq.loc[maxid, "Citations Ratio"]
  return (maxid, max)
relacion_columna()

"""Pregunta 8"""

def poblacion():
  poblacionq = carga_datos()
  poblacionq["Population"]=poblacionq["Energy Supply"] / poblacionq["Energy Supply per Capita"]
  poblacionq=poblacionq.sort_values(by="Population", ascending=False)
  tercer_pais=poblacionq.iloc[2].name
  return tercer_pais
poblacion()

"""Pregunta 9"""

def citable_document():
  documentq = carga_datos()
  documentq["Citable document per Capita"]=documentq["Citable documents"]/documentq["Energy Supply per Capita"]
  correlacion= documentq["Citable documents"].corr(documentq["Energy Supply per Capita"])
  return correlacion
citable_document()

"""Pregunta 10"""

def high_renewable():
    datos = carga_datos()
    top15 = datos.head(15)
    median_renewable = top15['% Renewable'].median()
    datos['HighRenew'] = (datos['% Renewable'] >= median_renewable).astype(int)
    high_renew_series = datos.sort_values(by=['HighRenew', 'Rank'], ascending=[False, True])
    return high_renew_series
high_renewable()

"""Pregunta 11"""

def resumen_poblacion_por_continente():
    datos = carga_datos()
    datos["Population"] = datos["Energy Supply"] / datos["Energy Supply per Capita"]

    continent_dict = {
        'China': 'Asia',
        'United States': 'North America',
        'Japan': 'Asia',
        'United Kingdom': 'Europe',
        'Russian Federation': 'Europe',
        'Canada': 'North America',
        'Germany': 'Europe',
        'India': 'Asia',
        'France': 'Europe',
        'South Korea': 'Asia',
        'Italy': 'Europe',
        'Spain': 'Europe',
        'Iran': 'Asia',
        'Australia': 'Australia',
        'Brazil': 'South America'
    }

    datos['Continent'] = datos.index.map(continent_dict)
    resumen_continentes = datos.groupby('Continent')['Population'].agg(['size', 'sum', 'mean', 'std'])
    resumen_continentes = resumen_continentes.reset_index()
    resumen_continentes.columns = ['Continent', 'size', 'sum', 'mean', 'std']

    resumen_paises = datos[['Population']].reset_index()

    return resumen_continentes, resumen_paises

# Llamar a la función para obtener el resumen de población por continente y población estimada de cada país
resumen_continentes, resumen_paises = resumen_poblacion_por_continente()
print("Resumen por continente:")
print(resumen_continentes)
print("\nPoblación estimada de cada país:")
print(resumen_paises)